                db "SERIAL"
* SERIAL
* Version 1.0 vom 28.3.94
* (c) 1993 Bastian Schick
*
* runs ok with 300/1200/2400/4800/9600 Baud
*
* 15.08.96      42BS            removed 'nonsense'-code
* 31.08.96      42BS            error in WaitComLynxByte

SERIAL          equ 1           ; set flag for DEBUG.INC
***************
* TIMER4 = UART-Timer
* initialisieren
***************
contrl          equ %00011101   ; even par

IFND Baudrate
Baudrate        set 9615
ENDIF
prescale       set 125000/Baudrate-1


                echo "Baudrate : %DBaudrate"

IFND SerialTimer
SerialTimer     EQU 6
ENDIF
SerialReload    equ 90          ; 11 bits*8 ticks + turnaround


IFND TimeOut
TimeOut         equ 20          ; ~5s
ENDIF

****************

InitComLynx::   php
                sei
IFD DEBUG
                lda $fff9
                pha
                lda #$4
                sta $fff9                       ; enable RAM under the ROM

                ldx #LoaderLen-1                ; put Loader in the right place
.loop             lda _Loader,x
                  sta Loader,x
                  dex
                bpl .loop
                pla
                sta $fff9
ENDIF

patch0          IF prescale<256
                lda #prescale
                sta $fd10
                lda #%00011000
                ELSE
                lda #prescale/2
                sta $fd10
                lda #%00011001
                ENDIF
                sta $fd11

;>                lda #SerialReload
;>                sta $FD00+SerialTimer*4
;>                lda #%00010111
;>                sta $fd01+SerialTimer*4
                
                lda #contrl
                sta SerialContrl
                ora #$48
                sta $fd8c
                stz TxDone
                stz TimeOutFlag
                stz TxPtrIn
                stz TxPtrOut
                stz RxPtrIn
                stz RxPtrOut
                lda #TimeOut
                sta SerialTimeOut               ; 2,6 s
.exit           SETIRQVEC 4,SerialIRQ
;>                SETIRQVEC SerialTimer,RecoverRxIRQ
                plp
                rts
if 0
RecoverRxIRQ::  lda #$20
                bit $fd8c
                beq .exit
                bvc .1
.exit           END_IRQ

.1
                lda #$88
                trb $fd01+SerialTimer*4
                lda $fd8d
                stz TxDone
                lda #$48        ; RxIRQ setzen und Fehler lîschen
                ora SerialContrl
                sta $fd8c
                END_IRQ
endif
***************
SerialIRQ::     bit TxDone
                bmi .tx_irq
                ldx $fd8d
                lda $fd8c
                and #RxParityErr|RxOverrun|RxFrameErr|RxBreak
                beq .rx_irq
                tsb SerialStat  ; ev. Fehler merken
                bit #RxBreak
                beq .noBreak
                stz TimeOutFlag ; bei BREAK alles reset
                stz TxPtrIn
                stz TxPtrOut
                stz RxPtrIn
                stz RxPtrOut
.noBreak        lda #$48|contrl        ; RxIRQ setzen und Fehler lîschen
;>                ora SerialContrl
                sta $fd8c
                lda #$10
                sta $fd80
                END_IRQ

.rx_irq         lda #$48|contrl        ; RxIRQ setzen und Fehler lîschen
;>                ora SerialContrl
                sta $fd8c
                txa
IFD DEBUG
                jsr do_debug
                bcc .exit0
ENDIF
                ldx RxPtrIn
                sta RxBuffer,x
                txa
                inx

IF RxBufferSize<>256
                cpx #RxBufferSize
                bne .cont0
                ldx #0
ENDIF

.cont0          cpx RxPtrOut
                beq .1
                stx RxPtrIn
                lda #$10
                sta $fd80
                END_IRQ

.1              sta RxPtrIn
                lda #$80
                tsb SerialStat

.exit0
                lda #$10
                sta $fd80
                END_IRQ
*************** 
.tx_irq         ldx TxPtrOut
                cpx TxPtrIn
                beq .cont1

                lda TxBuffer,x
                sta $fd8d

IF TxBufferSize<>256
                inx
                cpx #TxBufferSize
                bne .cont2
                ldx #0
.cont2          stx TxPtrOut
ELSE
                inc TxPtrOut
ENDIF

.exit1          lda #$88|contrl
;>                ora SerialContrl
                sta $fd8c
                lda #$10
                sta $fd80
                END_IRQ

.cont1          lda $fd8c
                bit #$20
                beq .exit1
                bvs .exit1
                stz TxDone
                lda #$48|contrl
;>                ora SerialContrl
                sta $fd8c

                lda #$10
                sta $fd80
                END_IRQ
***************
* Byte vom ComLynx holen
***************
RecComLynxByte::phx
                ldx RxPtrOut
                cpx RxPtrIn
                beq .99
                lda RxBuffer,x
IF RxBufferSize<>256
                inx
                cpx #RxBufferSize
                bne .1
                ldx #0
.1              stx RxPtrOut
ELSE
                inc RxPtrOut
ENDIF
                plx
                sec
                rts
.99             plx
                clc
                rts
***************
* Byte Åber ComLynx senden
***************
SndComLynxByte::
                phx
                ldx TxPtrIn
                sta TxBuffer,x
                inx
IF TxBufferSize<>256
                cpx #TxBufferSize
                bne .ok
                ldx #0
.ok
ENDIF
                cpx TxPtrOut
                beq .error
                stx TxPtrIn
                bit TxDone
                bmi .exit
                php
                sei
                lda #$88|contrl
;>                ora SerialContrl
                sta $fd8c       ; TX-IRQ erlauben RX-IRQ sperren
                sta TxDone
                plp
.exit           plx
                sec
                rts

.error          plx
                clc
                rts

WaitComLynxByte::
                stz SerialStat
.loop           jsr RecComLynxByte
                bcs .exit
                lda SerialStat
                beq .loop
;>                bne .exit0

.exit0          lda #0
                clc
.exit           rts

***************
TxStat::
* C = 0 => Sendepuffer noch voll
***************
                lda TxPtrIn
                cmp TxPtrOut
                beq .exit
                sec
.exit           rts
